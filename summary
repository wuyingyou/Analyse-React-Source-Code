a. PooledClass:
1. function Car() {};
   Car.prototype.destruct = function() { // reset instance state }
2. Car.pooledSize = 10;
3. Car.instancePool = [];
对象池的概念

b.Transaction:
1. 去报有initialize && close对方法，initialize用于缓存当前上下文且重新设置新的上下文，
close用于释放新的上下文，且恢老的上下文

确保在包裹函数执行完过后恢复执行前的现场，比如：执行前有文字被选中，执行后文字也得被选中
又比如Button onClick事件处理，执行前为回调事件处理栈为空，执行中加入，执行后清理并释放

事务的概念，确保执行前后上下文能恢复

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.

c. batchedUpdates - ReactMount.batchedUpdates <==> ReactDefaultBatchingStrategy.batchedUpdates
1. 执行前保存之前上线文且设置标志位，isBatchingUpdates = true,执行后恢复之前上下文
2. 执行前执行空函数，执行后保证一定执行ReactUpdates.flushBatchedUpdates
3. 再比如使用ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);触发onClick事件
4. 在一个DOM事件中的多个setState(可以是不同的组件的setState)处于同一个批更新中
5. setTimeout中的多个setState(可以是不同的组件的setState)处于全新的批处理中
6. Promise.then同setTimeout一样
7. DOM事件中的setState、setTimeout中的setState、Promise.resovle中的setState不可能处于同一个批处理中
批量更新

d. ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);
--->
Component.performUpdateIfNecessary
ReactCompositeComponentWrapper

Flow:

const markup = ReactReconciler.mountComponent(RootComponent)
<==> new ReactCompositeComponentWrapper(element).mountComponent()
 ReactMount._mountImageIntoNode(markup)

d. events
/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

Document 捕获所有事件(通过冒泡机制), 比如: onclick, onchange等事件, 接着执行默认的全局事件处理程序.
默认的全局事件处理程序通过触发事件的原始Dom(React组件中的最外层Dom中存储了对应的实例引用)找到对应的ReactComponent实例
在通过重新创建Dom(FakeDom), FakeDom.dispatch('react-event'); FakeDom.attachEvent(ReactComponent.eventHandle.bind(ReactComponent))
执行ReactComponent中的真正的事件处理程序

e. diff algorithm - module 32 ReactDOMComponent

源码如下:
ReactDOMComponent._updateDOMProperties(lastProps, nextProps, transaction); // 对比并更新组件最外层Dom
ReactDOMComponent._updateDOMChildren(lastProps, nextProps, transaction, context); // 对比并更新孩子组件Dom

1. 如果组件两次render结果中最外层的type改变则重新创建整个tree
2. 如果组件两次render结果中最外层的type没被改变, 则举例说明如下:

组件如下:

class Home extends Component {

  state = {
    list: [
      { name: 'a' }, 
      { name: 'b' }
    ],
  }

  append = () => {
    this.setState({
      list: [
        ...this.state.list,
        { name: 'c' },
      ],
    });
  }

  render() {
    return (
      <div>
        <Button onClick={this.append}>Append</Button>
        {
          this.state.list.map(l => <div>{l.name}</div>)
        }
      </div>
    );
  }
}

ReactDom.render(<Home />, document.getDocumentById('app'));

当用户店家完Append, 由于两次结果type没变,则只进行delta更新, ReactDOMComponent._updateDOMProperties会更新
最外层的div的相关属性, 此例中没有改变.接着检查孩子节点是否有改变
ReactDOMComponent._updateDOMChildren(lastProps, nextProps, transaction, context)
组件的孩子节点虚拟Dom表示如下:
前一次prevChildren
[                      ----->     {
  {Button Element}     flattern    .0: {Button Element}
  [                                .1.0: {div Element}
    {div Element}                  .1.1: {div Element}
    {div Element}                 }
  ]
]
后一次:nextChildren
[                      ------>     {
  {Button Element}     flattern      .0: {Button Element}
  [                                  .1.0: {div Element}
    {div Element}                    .1.1: {div Element}
    {div Element}                    .1.2: {div Element}
    {div Element}                  }
  ]
]

对比则按照扁平化之后的格式对比,且只对比同一属性

.0 对比发现type没改变,对比属性是否有改动
.1.0对比发现type没改变,对比属性是否有改动 // 根据顺序对比
.1.1对比发现type没改变,对比属性是否有改动
.1.2对比发现之后后者有,则重新创建

注意: 这里如果有div设置了key那么flattern之后, 会如下展示:
onPress = () => {
  this.setState({ // 更换顺序
    list: [
      { name: 'c' },
      { name: 'b' },
      { name: 'a' },
    ],
  });
}
this.state.list.map(l => <div key={l.name}>{l.name}</div>)
前一次prevChildren
{
  .0: {Button Element}
  .1.$a: {div Element}
  .1.$b: {div Element}
}
后一次:nextChildren
{
  .0: {Button Element}
  .1.$a: {div Element}
  .1.$b: {div Element}
  .1.$c: {div Element}
}

设置了key之后会根据key值对比

updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
  ) {
    if (!nextChildren && !prevChildren) {
      return;
    }
    var name;
    var prevChild;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) { // 前后都有则判断是否需要更新
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, true);
        nextChildren[name] = nextChildInstance;
        // Creating mount image now ensures refs are resolved in right order
        // (see https://github.com/facebook/react/pull/7101 for explanation).
        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
        mountImages.push(nextChildMountImage);
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        prevChild = prevChildren[name];
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
        ReactReconciler.unmountComponent(prevChild, false);
      }
    }
  },

f. js中UMD模块加载结果如下:

(function(f) {
  // CommonJS
  if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = f(require('react'));

  // RequireJS
  } else if (typeof define === "function" && define.amd) {
    define(['react'], f);

  // <script>
  } else {
    var g;
    if (typeof window !== "undefined") {
      g = window;
    } else if (typeof global !== "undefined") {
      g = global;
    } else if (typeof self !== "undefined") {
      g = self;
    } else {
      // works providing we're not in "use strict";
      // needed for Java 8 Nashorn
      // see https://github.com/facebook/react/issues/3037
      g = this;
    }
    g.ReactDOM = f(g.React);
  }
})(function(){
  return (function (f) { return f() })(function() {
     var define, module, exports;
     return (function e(t, n, r) { 
       function s(o, u) { 
         if (!n[o]) { 
           if (!t[o]) { 
             var a = typeof require == "function" && require; 
             if (!u && a) 
             return a(o, !0); 
             if (i) 
             return i(o, !0); 
             var f = new Error("Cannot find module '" + o + "'"); 
             throw f.code = "MODULE_NOT_FOUND", f 
          } 
        var l = n[o] = { exports: {} }; 
        t[o][0].call(l.exports, function (e) { 
            var n = t[o][1][e]; 
            return s(n ? n : e) 
            }, l, l.exports, e, t, n, r) 
          } 
          return n[o].exports 
        } 
        var i = typeof require == "function" && require; 
        for (var o = 0; o < r.length; o++) 
        s(r[o]); 
        return s 
      })({
        1: [function ModuleA(_dereq_, module, exports) {
        var ModuleB = _dereq_(2)
      }, {'2': 2}],
        2: [fucntion ModuleB(_dereq_, module, exports){ }, {}]
      }, {}, [1])(1)
    )
  })
})


最终会是
1,2编号表示模块名称或者编号
{'2': 2} 表示依赖模块
最外层参数[1], 表示是入口模块

{
  1: {
    exports: ReactDOMUMDEntry
  }
  2: {
    exports: React
  },
  3: {
    exports: ReactDOM
  },
}

f. Mount流程(第一次从无到有创建virtualDOM树以及DOM树) 
react.js createElement创建的一个tree对象,有唯一根节点
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type, // 构造函数
    key: key,
    ref: ref,
    props: props, // props属性参数,包括子元素
    // Record the component responsible for creating this element.
    _owner: owner
  };

ReactDOM.render(element, container, callback)会将element包装成ReactCompositeComponent对象或者是
ReactDOMComponent
ReactCompositeComponent: 
{
    _currentElement: element, // refer to element
    _rootNodeID: 0,
    _compositeType: null, // stateless or pure or composite
    _instance: null, // refer to new element的实例
    _hostParent: null,
    _hostContainerInfo: null,

    // See ReactUpdateQueue
    _updateBatchNumber: null, // 批次更新的批次号
    _pendingElement: null,
    _pendingStateQueue: null, // setState json接口存放的入参栈
    _pendingReplaceState: false, // 替换状态标志
    _pendingForceUpdate: false, // 强制刷新标志

    _renderedNodeType: null,
    _renderedComponent: null, // 子组件也就render方法中的
    _context: null,
    _mountOrder: 0; // 组装顺序, 父组件先于子组件
    _topLevelWrapper: null,

    // See ReactUpdates and ReactUpdateQueue.
    _pendingCallbacks: null, // setState callBack接口存放的入参栈

    // ComponentWillUnmount shall only be called once
    _calledComponentWillUnmount: false,
}

ReactDOMComponent: (ReactDOMComponent中不需要有_pendingCallbacks等因为不需要)
{
  _currentElement: element, // refer to element
  _tag: tag.toLowerCase(), // 标签名称
  _namespaceURI: null,
  _renderedChildren: null, // 孩子节点单个或数组ReactCompositeComponent or ReactDOMComponent
  _previousStyle: null,
  _previousStyleCopy: null,
  _hostNode: null, // 真正的Dom节点
  _hostParent: null,
  _rootNodeID: 0,
  _domID: 0,
  _hostContainerInfo: null,
  _wrapperState: null,
  _topLevelWrapper: null,
  _flags: 0,
}

且相互引用
1. new Home()._reactInternalInstance = ReactCompositeComponent
2. ReactCompositeComponent._instance = new Home()或者
3. document.createElement()['internalInstanceKey$e571hg6t2vg'] = ReactDOMComponent
4. ReactDOMComponent._hostNode = document.createElement()
然后递归ReactDOM.render子节点
Mount过程处在ReactReconcileTransaction中, 每个ReactReconcileTransaction临时有一个CallBack回调栈用于componentWillMount、componnentDidMount
componentWillMount先于componnentDidMount进栈,父组件的方法先于子组件方法进栈. Mount结束后执行回调且可以保证执行顺序为(仅仅执行一次): 子组件的componentWillMount-->
子组件的componentDidMount,父组件的componentWillMount,父组件的componentDidMount...( var cbs = []; cbs.push(componentWillMount); cbs.push(componnentDidMount), for(i = 0; i<cb.length;i++){cb[i]();})

Mount流程总结
1. 创建virtual DOM树结构(ReactCompositeComponent & ReactDOMComponent)
2. 创建DOM树结构
3. 构建virtual DOM与自定义的React Component引用关系
4. 构建DOM与ReactDOMComponent引用关系
5. 构建React Component实例时设置实例的updater(updateQueue组件)
或者(React Component视角)
constructor()
render()
componentWillMount()
componentDidMount()

g. Update流程(setState)
1. React Component实例触发this.setState({...}) or this.setState({...},() => { })
2. diff Algorithm 
3. 若有改变则进行更新

或者(React Component视角)
componentWillReceiveProps()
shouldComponentUpdate()
componentWillUpdate()
render()
componentDidUpdate()

h. Unmount流程

或者(React Component视角)
componentWillUnmount()

////////////////////////////////////////////////////////

this.debounceOnChange = _.debounce(this.onChange, 300);
this.onChange = (e) => {
  console.log(e.target) // is null;
}
<input onChange={this.debounceOnChange}

// root cause is SyntheticEvent is 'pooled', so async fetch is gonna get nullfilled

||
||
\/
this.debounceOnChange = _.debounce((e) => {
   console.log(e.target) // achieved it
}, 300);
this.onChange = (e) => {
  console.log(e.target) // enclosed e
  this.debounceOnChange(e);
}
<input onChange={this.onChange}